// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: build/proto/order_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskOrderService_GetOrdersForUser_FullMethodName  = "/proto.TaskOrderService/getOrdersForUser"
	TaskOrderService_GetAllTasks_FullMethodName       = "/proto.TaskOrderService/getAllTasks"
	TaskOrderService_GetTask_FullMethodName           = "/proto.TaskOrderService/getTask"
	TaskOrderService_BuyTaskAnswer_FullMethodName     = "/proto.TaskOrderService/buyTaskAnswer"
	TaskOrderService_CreateNewTask_FullMethodName     = "/proto.TaskOrderService/createNewTask"
	TaskOrderService_UpdatePriceOfTask_FullMethodName = "/proto.TaskOrderService/updatePriceOfTask"
	TaskOrderService_Ping_FullMethodName              = "/proto.TaskOrderService/ping"
)

// TaskOrderServiceClient is the client API for TaskOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskOrderServiceClient interface {
	GetOrdersForUser(ctx context.Context, in *UserOrders, opts ...grpc.CallOption) (TaskOrderService_GetOrdersForUserClient, error)
	GetAllTasks(ctx context.Context, in *None, opts ...grpc.CallOption) (TaskOrderService_GetAllTasksClient, error)
	GetTask(ctx context.Context, in *OrderTask, opts ...grpc.CallOption) (*TaskOrderInfo, error)
	BuyTaskAnswer(ctx context.Context, in *UserBuyAnswer, opts ...grpc.CallOption) (*None, error)
	CreateNewTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*None, error)
	UpdatePriceOfTask(ctx context.Context, in *TaskForUpdate, opts ...grpc.CallOption) (*None, error)
	Ping(ctx context.Context, in *None, opts ...grpc.CallOption) (*None, error)
}

type taskOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskOrderServiceClient(cc grpc.ClientConnInterface) TaskOrderServiceClient {
	return &taskOrderServiceClient{cc}
}

func (c *taskOrderServiceClient) GetOrdersForUser(ctx context.Context, in *UserOrders, opts ...grpc.CallOption) (TaskOrderService_GetOrdersForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskOrderService_ServiceDesc.Streams[0], TaskOrderService_GetOrdersForUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &taskOrderServiceGetOrdersForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskOrderService_GetOrdersForUserClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type taskOrderServiceGetOrdersForUserClient struct {
	grpc.ClientStream
}

func (x *taskOrderServiceGetOrdersForUserClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskOrderServiceClient) GetAllTasks(ctx context.Context, in *None, opts ...grpc.CallOption) (TaskOrderService_GetAllTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskOrderService_ServiceDesc.Streams[1], TaskOrderService_GetAllTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &taskOrderServiceGetAllTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskOrderService_GetAllTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type taskOrderServiceGetAllTasksClient struct {
	grpc.ClientStream
}

func (x *taskOrderServiceGetAllTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskOrderServiceClient) GetTask(ctx context.Context, in *OrderTask, opts ...grpc.CallOption) (*TaskOrderInfo, error) {
	out := new(TaskOrderInfo)
	err := c.cc.Invoke(ctx, TaskOrderService_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskOrderServiceClient) BuyTaskAnswer(ctx context.Context, in *UserBuyAnswer, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, TaskOrderService_BuyTaskAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskOrderServiceClient) CreateNewTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, TaskOrderService_CreateNewTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskOrderServiceClient) UpdatePriceOfTask(ctx context.Context, in *TaskForUpdate, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, TaskOrderService_UpdatePriceOfTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskOrderServiceClient) Ping(ctx context.Context, in *None, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, TaskOrderService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskOrderServiceServer is the server API for TaskOrderService service.
// All implementations must embed UnimplementedTaskOrderServiceServer
// for forward compatibility
type TaskOrderServiceServer interface {
	GetOrdersForUser(*UserOrders, TaskOrderService_GetOrdersForUserServer) error
	GetAllTasks(*None, TaskOrderService_GetAllTasksServer) error
	GetTask(context.Context, *OrderTask) (*TaskOrderInfo, error)
	BuyTaskAnswer(context.Context, *UserBuyAnswer) (*None, error)
	CreateNewTask(context.Context, *Task) (*None, error)
	UpdatePriceOfTask(context.Context, *TaskForUpdate) (*None, error)
	Ping(context.Context, *None) (*None, error)
	mustEmbedUnimplementedTaskOrderServiceServer()
}

// UnimplementedTaskOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskOrderServiceServer struct {
}

func (UnimplementedTaskOrderServiceServer) GetOrdersForUser(*UserOrders, TaskOrderService_GetOrdersForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrdersForUser not implemented")
}
func (UnimplementedTaskOrderServiceServer) GetAllTasks(*None, TaskOrderService_GetAllTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllTasks not implemented")
}
func (UnimplementedTaskOrderServiceServer) GetTask(context.Context, *OrderTask) (*TaskOrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskOrderServiceServer) BuyTaskAnswer(context.Context, *UserBuyAnswer) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTaskAnswer not implemented")
}
func (UnimplementedTaskOrderServiceServer) CreateNewTask(context.Context, *Task) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTask not implemented")
}
func (UnimplementedTaskOrderServiceServer) UpdatePriceOfTask(context.Context, *TaskForUpdate) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePriceOfTask not implemented")
}
func (UnimplementedTaskOrderServiceServer) Ping(context.Context, *None) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTaskOrderServiceServer) mustEmbedUnimplementedTaskOrderServiceServer() {}

// UnsafeTaskOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskOrderServiceServer will
// result in compilation errors.
type UnsafeTaskOrderServiceServer interface {
	mustEmbedUnimplementedTaskOrderServiceServer()
}

func RegisterTaskOrderServiceServer(s grpc.ServiceRegistrar, srv TaskOrderServiceServer) {
	s.RegisterService(&TaskOrderService_ServiceDesc, srv)
}

func _TaskOrderService_GetOrdersForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserOrders)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskOrderServiceServer).GetOrdersForUser(m, &taskOrderServiceGetOrdersForUserServer{stream})
}

type TaskOrderService_GetOrdersForUserServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type taskOrderServiceGetOrdersForUserServer struct {
	grpc.ServerStream
}

func (x *taskOrderServiceGetOrdersForUserServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskOrderService_GetAllTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(None)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskOrderServiceServer).GetAllTasks(m, &taskOrderServiceGetAllTasksServer{stream})
}

type TaskOrderService_GetAllTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type taskOrderServiceGetAllTasksServer struct {
	grpc.ServerStream
}

func (x *taskOrderServiceGetAllTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskOrderService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskOrderServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskOrderService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskOrderServiceServer).GetTask(ctx, req.(*OrderTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskOrderService_BuyTaskAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBuyAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskOrderServiceServer).BuyTaskAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskOrderService_BuyTaskAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskOrderServiceServer).BuyTaskAnswer(ctx, req.(*UserBuyAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskOrderService_CreateNewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskOrderServiceServer).CreateNewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskOrderService_CreateNewTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskOrderServiceServer).CreateNewTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskOrderService_UpdatePriceOfTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskForUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskOrderServiceServer).UpdatePriceOfTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskOrderService_UpdatePriceOfTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskOrderServiceServer).UpdatePriceOfTask(ctx, req.(*TaskForUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskOrderService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskOrderServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskOrderService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskOrderServiceServer).Ping(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskOrderService_ServiceDesc is the grpc.ServiceDesc for TaskOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskOrderService",
	HandlerType: (*TaskOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTask",
			Handler:    _TaskOrderService_GetTask_Handler,
		},
		{
			MethodName: "buyTaskAnswer",
			Handler:    _TaskOrderService_BuyTaskAnswer_Handler,
		},
		{
			MethodName: "createNewTask",
			Handler:    _TaskOrderService_CreateNewTask_Handler,
		},
		{
			MethodName: "updatePriceOfTask",
			Handler:    _TaskOrderService_UpdatePriceOfTask_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _TaskOrderService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getOrdersForUser",
			Handler:       _TaskOrderService_GetOrdersForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllTasks",
			Handler:       _TaskOrderService_GetAllTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "build/proto/order_service.proto",
}
